// Telegram WebApp integration
(function () {
  const tg = window.Telegram?.WebApp;
  if (tg) {
    tg.expand();
    tg.MainButton.setText('–ó–∞–∫—Ä—ã—Ç—å');
    tg.MainButton.onClick(() => tg.close());
  }

  // ===== Registration & Test Flow =====
  async function startRegistration(effUid) {
    if (!effUid) { resultEl.textContent = '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω UID'; return; }
    // Start
    await fetch('/api/registration/start', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid) }) });
    // Age confirm screen
    resultEl.innerHTML = `
      <div><b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞</b></div>
      <div style="margin-top:8px">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ${MIN_AGE_PLACEHOLDER()} ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: ${MAX_AGE_PLACEHOLDER()}</div>
      <div class="actions" style="margin-top:10px">
        <button id="age-yes">‚úÖ –î–∞, –º–Ω–µ –µ—Å—Ç—å 16 –ª–µ—Ç</button>
        <button id="age-no">‚ùå –ù–µ—Ç, –º–Ω–µ –º–µ–Ω—å—à–µ 16</button>
      </div>
    `;
    document.getElementById('age-yes').onclick = async () => {
      await fetch('/api/registration/age-confirm', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid), confirmed: true }) });
      renderAgeInput(effUid);
    };
    document.getElementById('age-no').onclick = async () => {
      await fetch('/api/registration/age-confirm', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid), confirmed: false }) });
      resultEl.innerHTML = '<div>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.</div>';
    };
  }

  function renderAgeInput(effUid) {
    resultEl.innerHTML = `
      <div><b>–®–∞–≥ 2/5: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç</b></div>
      <div class="row" style="margin-top:8px">
        <input id="age-input" type="number" min="${MIN_AGE_PLACEHOLDER()}" max="${MAX_AGE_PLACEHOLDER()}" placeholder="–í–æ–∑—Ä–∞—Å—Ç" style="padding:8px;border-radius:8px;border:1px solid #1f2228;background:#0e0f12;color:#e8e8e8;">
        <button id="age-apply" style="margin-left:8px;">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
      </div>
      <div id="age-err" class="muted" style="margin-top:6px"></div>
    `;
    document.getElementById('age-apply').onclick = async () => {
      const val = Number(document.getElementById('age-input').value || '');
      const res = await fetch('/api/registration/age-input', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid), age: val }) });
      if (!res.ok) {
        const j = await res.json().catch(()=>({}));
        document.getElementById('age-err').textContent = j.error || '–û—à–∏–±–∫–∞';
        return;
      }
      renderKmYear(effUid);
    };
  }

  function renderKmYear(effUid) {
    resultEl.innerHTML = `
      <div><b>–®–∞–≥ 3/5: –ì–æ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ö–ú</b></div>
      <div class="row" style="margin-top:8px">
        <input id="km-input" type="number" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2023" style="padding:8px;border-radius:8px;border:1px solid #1f2228;background:#0e0f12;color:#e8e8e8;">
        <button id="km-apply" style="margin-left:8px;">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
      </div>
      <div id="km-err" class="muted" style="margin-top:6px"></div>
    `;
    document.getElementById('km-apply').onclick = async () => {
      const val = Number(document.getElementById('km-input').value || '');
      const res = await fetch('/api/registration/km-year', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid), km_year: val }) });
      if (!res.ok) {
        const j = await res.json().catch(()=>({}));
        document.getElementById('km-err').textContent = j.error || '–û—à–∏–±–∫–∞';
        return;
      }
      renderCasteSelection(effUid);
    };
  }

  async function renderCasteSelection(effUid) {
    const list = await fetch('/api/castes').then(r=>r.json()).catch(()=>null);
    if (!list?.ok) { resultEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç—ã'; return; }
    const castes = list.castes || [];
    const rows = castes.map(c => `
      <div class="card" style="margin:8px 0">
        <div><b>${c.name}</b></div>
        <div class="muted">${c.description}</div>
        <div style="margin-top:6px">–í–æ–∑—Ä–∞—Å—Ç: ${c.min_age}-${c.max_age} ‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤: ${c.test_questions}</div>
        <div style="margin-top:8px"><button class="select-caste" data-id="${c.id}">‚úÖ –í—ã–±—Ä–∞—Ç—å</button></div>
      </div>
    `).join('');
    resultEl.innerHTML = `<div><b>–®–∞–≥ 4/5: –í—ã–±–æ—Ä –∫–∞—Å—Ç—ã</b></div>${rows}`;
    resultEl.querySelectorAll('.select-caste').forEach(btn => {
      btn.addEventListener('click', async () => {
        const cid = btn.getAttribute('data-id');
        const res = await fetch('/api/registration/select-caste', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid), caste_id: cid }) });
        if (!res.ok) {
          const j = await res.json().catch(()=>({}));
          resultEl.innerHTML = `<div>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Å—Ç—ã: ${j.error || ''}</div>`;
          return;
        }
        renderTestIntro(effUid, cid);
      });
    });
  }

  async function renderTestIntro(effUid, casteId) {
    resultEl.innerHTML = `
      <div><b>–®–∞–≥ 5/5: –¢–µ—Å—Ç ‚Äî ${casteId}</b></div>
      <div style="margin-top:8px">–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ.</div>
      <div class="actions" style="margin-top:10px">
        <button id="start-test">üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç</button>
      </div>
    `;
    document.getElementById('start-test').onclick = async () => {
      await fetch('/api/test/start', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid) }) });
      renderQuestion(effUid);
    };
  }

  async function renderQuestion(effUid) {
    const q = await fetch(`/api/test/question?uid=${encodeURIComponent(effUid)}`).then(r=>r.json()).catch(()=>null);
    if (!q?.ok || q.done) { return renderFinish(effUid); }
    const bar = 'üü©'.repeat(q.index) + '‚¨ú'.repeat(Math.max(0, q.total - q.index));
    resultEl.innerHTML = `
      <div><b>–í–æ–ø—Ä–æ—Å ${q.index + 1} –∏–∑ ${q.total}</b> | ${q.progress}%</div>
      <div>${bar}</div>
      <div style="margin-top:8px"><b>${q.question}</b></div>
      <div class="row" style="margin-top:8px">
        <textarea id="ans" rows="4" style="width:100%;padding:8px;border-radius:8px;border:1px solid #1f2228;background:#0e0f12;color:#e8e8e8;"></textarea>
      </div>
      <div class="actions" style="margin-top:8px"><button id="send-answer">‚û°Ô∏è –î–∞–ª–µ–µ</button></div>
    `;
    document.getElementById('send-answer').onclick = async () => {
      const val = String(document.getElementById('ans').value || '').trim();
      const res = await fetch('/api/test/answer', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid), answer: val }) });
      if (!res.ok) { resultEl.innerHTML += '<div class="muted">–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞</div>'; return; }
      renderQuestion(effUid);
    };
  }

  async function renderFinish(effUid) {
    await fetch('/api/test/finish', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ uid: Number(effUid) }) });
    resultEl.innerHTML = `
      <div>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –°—Ç–∞—Ç—É—Å: pending.</div>
    `;
  }

  // Helpers to display configured age without hardcoding
  function MIN_AGE_PLACEHOLDER(){ return 16; }
  function MAX_AGE_PLACEHOLDER(){ return 25; }

  const userInfoEl = document.getElementById('user-info');
  const resultEl = document.getElementById('result');
  const menuEl = document.getElementById('menu');
  const btnStatus = document.getElementById('btn-status');
  const btnSend = document.getElementById('btn-send');

  // Warn if opened from file:// where API calls won't work
  const isFileProto = location.protocol === 'file:';
  if (isFileProto) {
    const warn = document.createElement('div');
    warn.className = 'muted';
    warn.style.marginTop = '8px';
    warn.innerHTML = '–í–Ω–∏–º–∞–Ω–∏–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–∞–∫ file://. API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: <code>python webapp_server.py</code> –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ <a href="http://127.0.0.1:8080/" target="_blank">http://127.0.0.1:8080/</a>.';
    userInfoEl.appendChild(warn);
  }

  const initDataUnsafe = tg?.initDataUnsafe || {};
  const user = initDataUnsafe?.user;
  // Fallback: allow passing uid via URL for local dev (e.g., http://127.0.0.1:8080/?uid=123)
  const urlUid = (() => {
    try { return new URLSearchParams(location.search).get('uid'); } catch { return null; }
  })();
  const uid = user?.id || (urlUid ? Number(urlUid) : null);

  // Render user block
  if (user) {
    userInfoEl.innerHTML = `
      <div class="row">
        <div class="avatar">${user?.first_name?.[0] || 'U'}</div>
        <div class="info">
          <div><b>–ò–º—è:</b> ${user.first_name || ''} ${user.last_name || ''}</div>
          <div><b>username:</b> @${user.username || '‚Äî'}</div>
          <div><b>ID:</b> ${user.id}</div>
          <div><b>–Ø–∑—ã–∫:</b> ${user.language_code || '‚Äî'}</div>
        </div>
      </div>
    `;
  } else {
    const hint = urlUid
      ? `<p class="muted">Dev-—Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º UID –∏–∑ URL: <b>${urlUid}</b>. –û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ Telegram –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.</p>`
      : '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp. –û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –±–æ—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä <code>?uid=TELEGRAM_ID</code> –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏.</p>';
    userInfoEl.innerHTML = hint;
    // Show dev UID input controls
    try {
      const box = document.getElementById('dev-uid-box');
      const input = document.getElementById('dev-uid-input');
      const apply = document.getElementById('dev-uid-apply');
      if (box && input && apply) {
        box.style.display = 'flex';
        if (urlUid) input.value = urlUid;
        apply.addEventListener('click', () => {
          const val = Number(input.value || '');
          if (!val) { alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID'); return; }
          const sp = new URLSearchParams(location.search);
          sp.set('uid', String(val));
          const newUrl = location.pathname + '?' + sp.toString();
          history.replaceState({}, '', newUrl);
          // Re-run loading with new UID
          loadMenuAndStatus(String(val));
        });
      }
    } catch {}
  }

  // Load menu and status from backend (mirrors bot)
  async function loadMenuAndStatus(overrideUid) {
    try {
      const effUid = overrideUid || uid;
      const qs = effUid ? `?uid=${encodeURIComponent(effUid)}` : '';
      const [statusRes, menuRes] = await Promise.all([
        fetch(`/api/status${qs}`).then(r => r.json()).catch((e) => { console.warn('status failed', e); return null; }),
        fetch(`/api/menu${qs}`).then(r => r.json()).catch((e) => { console.warn('menu failed', e); return null; }),
      ]);

      if (statusRes?.ok) {
        const lines = [];
        lines.push(`<div><b>–°—Ç–∞—Ç—É—Å:</b> ${statusRes.status || '‚Äî'}</div>`);
        if (statusRes.caste_name) lines.push(`<div><b>–ö–∞—Å—Ç–∞:</b> ${statusRes.caste_name}</div>`);
        if (statusRes.registered_at) lines.push(`<div><b>–° –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${statusRes.registered_at.slice(0,10)}</div>`);
        const box = document.createElement('div');
        box.className = 'muted';
        box.innerHTML = lines.join('');
        userInfoEl.appendChild(box);
      }

      if (menuRes?.ok && Array.isArray(menuRes.menu)) {
        menuEl.innerHTML = '';
        menuRes.menu.forEach(row => {
          const rowEl = document.createElement('div');
          rowEl.className = 'menu-row';
          row.forEach(text => {
            const btn = document.createElement('button');
            btn.textContent = text;
            btn.className = 'menu-btn';
            btn.addEventListener('click', () => handleMenuClick(text));
            rowEl.appendChild(btn);
          });
          menuEl.appendChild(rowEl);
        });
      } else if (!menuRes && !statusRes) {
        menuEl.innerHTML = '<div class="muted">API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä: <code>python webapp_server.py</code> –∏ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ http://127.0.0.1:8080/</div>';
      }
    } catch (err) {
      console.error('loadMenuAndStatus failed', err);
      menuEl.innerHTML = '<div class="muted">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.</div>';
    }
  }

  async function handleMenuClick(text) {
    try {
      const effUid = uid || new URLSearchParams(location.search).get('uid');
      const qs = effUid ? `?uid=${encodeURIComponent(effUid)}` : '';
      // Map menu actions
      if (text.includes('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å') || text.includes('–ú–æ–π —Å—Ç–∞—Ç—É—Å')) {
        const data = await fetch(`/api/status${qs}`).then(r => r.json());
        if (data?.ok) {
          resultEl.innerHTML = `
            <div><b>–°—Ç–∞—Ç—É—Å:</b> ${data.status || '‚Äî'}</div>
            <div><b>–ö–∞—Å—Ç–∞:</b> ${data.caste_name || '‚Äî'}</div>
            <div><b>ID:</b> ${data.user_id || '‚Äî'}</div>
            <div><b>username:</b> @${data.username || '‚Äî'}</div>
          `;
        } else {
          resultEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å';
        }
        return;
      }
      if (text.includes('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–∞')) {
        const data = await fetch('/api/clan-stats').then(r => r.json());
        if (data?.ok) {
          const top = (data.top_castes || []).map(x => `‚Ä¢ ${x.name}: ${x.count}`).join('<br>') || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
          resultEl.innerHTML = `
            <div><b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${data.total}</div>
            <div><b>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:</b> ${data.pending}</div>
            <div><b>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:</b> ${data.verified}</div>
            <div style="margin-top:6px"><b>–¢–æ–ø –∫–∞—Å—Ç:</b><br>${top}</div>
          `;
        } else {
          resultEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞–Ω–∞';
        }
        return;
      }
      if (text.includes('–†–µ—Å—É—Ä—Å—ã –∫–∞—Å—Ç—ã')) {
        const data = await fetch(`/api/resources${qs}`).then(r => r.json());
        if (data?.ok) {
          const lines = (data.items || []).map(x => `‚Ä¢ ${x}`).join('<br>');
          resultEl.innerHTML = `
            <div><b>–ö–∞—Å—Ç–∞:</b> ${data.caste_name}</div>
            <div style="margin-top:6px">${lines}</div>
          `;
        } else {
          resultEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã';
        }
        return;
      }
      if (text.includes('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞') || text.includes('–†–µ—Ñ–µ—Ä–∞–ª')) {
        const data = await fetch(`/api/referrals${qs}`).then(r => r.json());
        if (data?.ok) {
          resultEl.innerHTML = `
            <div><b>–°—Å—ã–ª–∫–∞:</b> <a href="${data.link}" target="_blank">${data.link}</a></div>
            <div><b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> ${data.invited_count}</div>
            <div><b>–ë–æ–Ω—É—Å (ref):</b> ${data.bonus_days} –¥–Ω.</div>
            <div><b>–ë–æ–Ω—É—Å (–º–æ–π):</b> ${data.my_bonus_days} –¥–Ω.</div>
          `;
        } else {
          resultEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–∫';
        }
        return;
      }
      if (text.includes('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') || text.includes('–ü–æ–º–æ—â—å')) {
        resultEl.innerHTML = `
          <div><b>FAQ:</b> –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –±–æ—Ç–∞. –í Web App –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ –ø–æ–ª–Ω—ã–µ FAQ/ADM –ø–∞–Ω–µ–ª–∏.</div>
        `;
        return;
      }
      if (text.includes('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è')) {
        resultEl.innerHTML = `
          <div>–≠–∫—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω (–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫, approve/decline).</n>`;
        return;
      }
      if (text.includes('–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω')) {
        await startRegistration(effUid);
        return;
      }
      // Fallback: notify bot
      const payload = { action: 'menu_click', label: text, user_id: effUid, time: new Date().toISOString() };
      if (tg) tg.sendData(JSON.stringify(payload));
    } catch (e) {
      resultEl.textContent = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é';
    }
  }

  btnStatus?.addEventListener('click', () => {
    fetch('/health').then(r => r.json()).then(data => {
      resultEl.textContent = '–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: ' + JSON.stringify(data);
    }).catch(err => {
      resultEl.textContent = '–û—à–∏–±–∫–∞: ' + String(err);
    });
  });

  btnSend?.addEventListener('click', () => {
    const payload = {
      action: 'webapp_demo',
      time: new Date().toISOString(),
      user_id: uid,
    };
    if (tg) {
      tg.sendData(JSON.stringify(payload));
      tg.close();
    } else {
      alert('Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
  });

  loadMenuAndStatus();
})();
